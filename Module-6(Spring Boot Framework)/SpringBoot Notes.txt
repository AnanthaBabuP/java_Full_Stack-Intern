# Spring Boot Framework
Internship-Course:

Notes:
    REST - REpresentational State Transfer
    STS - Spring Tools Suite
    URI = Uniform Resource Identifier
        localhost:8080/employee/empid=1000
     API - Application Programming Interface:
    --------
         Collection of predefined Classes and interfaces.
         Example:
            JDBC
            Servlet
    Rest mainly used for developing micro services.

    MVC Application:
    -----------------
        web.xml - deployment descriptor

    Persist data - permanent data.
Spring Boot Introduction:
    1. What is Spring Boot?     
        Spring boot is a advance version of spring Framework.
        It provide an easier and faster way to set up, configuration, and run both simple and web-based application.
        It is a Spring Module provide the RAD(Rapid Application Development) feature to the spring framework.
        It is used to create stand-alone spring-based application that you can just run because it's need minimal configuration.
        You Can start with several configuration instant of a complete spring configuration.
        Spring Boot is a great platform for java developers to create ready-to run ,self-contains, production-ready spring application.
        
        Spring Boot is a java-based framework that is used for developing Micro services.
        Pivotal is the company that is behind it.
        Spring Boot is some that make it simple to construct standalone, production-ready spring apps.
        Spring boot include extensive infrastructure support for constructing micro-services, allowing you can construct enterprise-ready application that can also be "simple run".

        Our SpringBoot Tutorial includes all topics of Spring Boot such as 
            feature
            project, 
                maven project
            Wizard
                Spring initializr,
                CLI,
                applications,
                annotations,
                dependency Management,
                properties,
                starters,
                Actuator,
                JPA,
                JDBC,
                etc...

        
        Spring Framework (+) Empaded Http Servers(Tomcat, jetty) (-) XML<bean> Configuration or @Configuratin (=) Spring Boot

    2. Difference Between Spring framework(1) VS Spring Boot(2)?
        Refer To Image
        1. Application  
            1. It is used to developing enterprise application
            2. It is used to develop REST API Application
        2. Based On
            1. Dependency Injection
            2. Autoconfiguration
        3. in-memory database:
            1. No in-memory database
            2. inbuild in-memory database such as H2
        4. program:
            1. It is loosely compiled 
            2. It is stand alone
        5. dependency descriptor:
            1. It is require dependency descriptor(web.xml)
            2. No required in dependency descriptor(web.xml)
        6. Server:
            1. we need to set server explicitly
            2. Inbuild server such as tomcat and jetty

    3. How to download Spring Boot:
        spring boot download -> Spring | Tools -> Spring Tools 4 for Eclipse 
        -> Downloads your system required Application> -> create new folder in driver c or d any drive 
        -> Paste the zip file and extract -> Open extracted folder -> Open folder on click Spring Tool Suite Application  And run it.

    4. Create and Run Project:
        file -> new -> Spring  started project -> set file name -> set maven project -> next -> (Add needed dependencies) After Click next -> Finish

        Open file com.example.demo -> @SpringBootApplication Annotation class -> right click -> Run as -> Spring Boot App -> Shoe the terminal to running Project.


Spring Boot Dependency Injection:
    Bean Scope: 
        @Component
        @Scope(value = "Bean Scope Name")
    -----------

        1. singleton(default Scope) - only one reference
        2. prototype - 
        3. request
        4. session
        5. global session

Spring Boot Web Application:
    1. Difference Between spring boot VS Spring MVC:
        Refer to image : Screenshot 2024-11-02 193400

    2. How to create Spring boot web application:
        1. File -> New -> Project -> Spring Started Project -> 
            Name(SB Web Application) -> type (Maven) -> java version(Any) 
            -> Next -> (Spring Boot 2.7) -> Spring Web(Select) -> Next -> Finish

            If JSP Render using add dependency in tomcat-jasper (Version based on your project tomcat server) to bom.xml


Spring Boot Web App Possibilities:
    1. Application properties:  
        spring.mvc.view.prefix = /Add Folder Name/
        spring.mvc.view.suffix = .jsp (or) .html
        server.port = <Customize Port Number>

Spring Initializr:
    1. Open Browser -> Type(Spring Initializr) -> Click On First Link  ->
        project - maven
        language - java
        spring boot - Select lowest version
        group - default
        Artifact -<Customize name>
        .
        .
        .
        Packing = jasper
        java - select any version

        Right Site -> Add Dependency
            1. Spring Configuration processor
            2. Spring web

        Click Generate.
    
    2. Cut the file and create new folder and paste zip file and extract the file inside the folder 
    -> Open Eclipse -> Right Import -> Import -> Existing Maven Project -> Next
    -> Route Directory - Open Extract Folder Select -> then Finish

    3. Create Controller Class And Create JSP file in (main/webapp) And Must add dependence for Rendering process in (tomcat-jasper-(Based on your project tomcat version)) And Run the application.

Spring Boot H2 Database:
    1. What is in-memory database?
        In-memory database relies on system memory as oppose to disk space for storage of data.
        Because Access is faster then disk acceded.
        *We use the in-memory database when we do not need to persist the data.
        in-memory database in an Empaded database.
        The Widely used in-memory databases are H2, HSQLDB(Hyper SQL Database) And Apache Derby.
        It Creates the Configuration automatically.
    
    2. Persistence VS In-Memory Database:
        The Persistent database persists the data in physical memory.
        The data will be able even if the database server is 'bounced'.
        Some popular persistence database are,
            Oracle
            MYSQL
            Postgres
            etc...

    3. What is H2Database:
        H2 is an 'Empaded, Open source, and in-memory database'.
        It is a 'Relational Database Management System(RDBMs) written in java.

        It is client/server application.
        It is generally used in 'unit testing'.
        It stores data in memory not persist the database on disk.
    
    4. Advantages:
        Zero Configuration
        it is easy to use
        It is lightweight and fast.
        It provide simple Configuration to switch between a real and in-memory database.
        It supports Standard SQL and JDBC API.
        It provide a web console to maintain in the database. 
    
    5. Setup Property for the H2 Database in the application:
        #H2 database property:
        spring.datasource.url=jdbc:h2:mem:testh2db
        spring.datasource.driverClassName=org.h2.Driver
        spring.datasource.username= sp
        spring.datasource.password=password
        spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

        #wnabling the H2 console
        spring.h2.console.enabled=true

    6. Needed Dependence for creating Spring Started Project:
           JDBC API
           Spring Data JPA
           Spring data JDBC
           H2 Database
           Spring Web

Spring Boot H2 Database CRUD Part 1,2:
    Spring Boot Form :
    <%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %>  
    
    // Inside Body tag
    <form:form action="/updateProduct" method="post" modelAttribute="product">
        // Path refer to pojo class variable Name
        Product ID: <form:input path="id" /><br><br> 
        Product Name: <form:input path="pname" /><br><br>
        Product Quantity: <form:input path="quantity" /><br><br>
        Product Price: <form:input path="price" /><br><br>
        <input type="submit" value="Update Product">
        <input type="reset" value="Clear">
    </form:form>

Spring Boot H2 Database CRUD Part 3:
    User Create Customize CrudRepository .
    'findBy' is a keyword You can create Customize method
    for example Just imagine to product table and find by id this default provided to CurdRepository, but name or another variable find's that call customize methods

    that's like List<Product> findBy<variableName>(variabledatatype variableName);
    It find the variable name to database and retrive to show on the data based on variable value


REST API Introduction:

    1. Web Service?
    2. API protocols and architectures
        REST(REpresentational State Transfer) - Latest Version
        Simple Object Access Protocol (SOAP) - old Version
    3. What purpose to use REST API?
        (Example: Weather report)
    4. JSON = JavaScript Object Notation	
        1. Collection of Array Objects
        2. Key value pair
    5. Web Services:
        Return the at present data.    
REST API Part 2:
    1. What is REST API?
        REST API Stands Representational State Transfer API
        It is an 'architectural style' that defines a 'set of constraints' to be used for creating 'web services'.
        REST API is a way of accessing web services in a 'simple' and 'flexible' way without having any processing.

        REST technology is generally preferred to the more robust 'Simple Object Access Prototype' technology,
        because REST uses less bandwidth, simple and flexible making it more suitable for internet usage.
        It is  used to fetch or give some information from a web service.
        All communication done via REST API uses only 'HTTP request'.

        It was Introduces and defined in year 2000 by 'Roy Fielding' during his research in PHD Program.

        Working:
            Request is send from client to Server in the form of web URL as Http Get or Post or Put or Delete request.
            After that, a response comes back from the server in the form of a resource which can be anything like HTML, XML, Image or JSON.
            But now JSON is the Most popular format being used in web Services.

    2. How Does REST API Work?
        The Key Component REST API Models Are:
            1. client
            2. Server
            3. Resource
    3. REpresentational State Transfer:
        It is a "architectural style" Providing Standard between computer System on the web,
        Making it easier for system to communicate with each other.
        REST-Compliant System is called Restful Systems, are characterized by how they are 'Stateless' And Separate the Concerns of Client and Server.
    4. Constrains Of REST architecture:
        1. Uniform interfaces
        2. Stateless
        3. Client-Server
        4. Layered System 
        5. Cacheable
        6. Code On Demand(optional)

    4.1 Unform Interface:
        This define Interface between client and Server.
        It Simplifies And Decompose the architecture to enable every part to be developed.
        It has four guiding principal: (Refer to Image)
            1. Identifier of resource:(Resource Based)
                Resource And URIs
                http://api.co/cars/123
            2. Manipulation of resource through 'Representation'(Manipulation Resource through Representation)
                JSON,XML,...
            3. Self-descriptive messages:(Self-descriptive messages)
                HTTP GET,POST,PUT,DELETE
                media type, catchability ...
            4. HATEOAS(Hypermedia As The Engine Of Application State)
                Hypermedia APIs:
                    HAL,JSON-LD, Siren...

    4.2 Stateless:
        Itself Handle The Request.
        The URI Define the resource and the state of the resource.
        the in between state is not maintained, Updated, or Communicate During the session.

    4.3 Client-Server:(Refer to image)
        1. Separation of Client and Server:
        2. Communication Between Client And Server
            1. Making Requests
            2. HTTP Verbs:
                1. GET
                2. POST
                3. PUT
                4. DELETE
        3. Headers And Accept Parameters:
            The Option For type of content are 'MIME(Multi Purpose Internet Mail Extension) Type'.
            They Are Separate by Slash(/).
            Example:
                text/html
                text/class
                text/plain(Default)
            Other Types:
                image - image/jpg, image/png, etc..
                audio - audio.wav, audio/mpeg
                video - video/mp4, video/ogg
                application - application/json,application/xml, applicaation/pdf, application/octet-stream
        
        4. Response Code:
            It contain Status of Respoce
                200 - ok
                201 - created
                204 - No content
                400 - Bad Requests
                403 - Forbidden
                404 - Not Found
                500 - Internal Server Error

        4.1 HTTP Verbs Status Code:
            GET - 200
            POST - 201  
            PUT - 200
            DELETE - 204

        5. Using HTTP to Choose a Representation:
            Accept
            Accept-language
            Accept-Encoding
            Accept-Charset

REST API Part 3:
    1. MySQL Connection:
        Open browser -> application property for <SpringBootApplication> MySQL connection
        Application. Property:
            # Database connection details
            spring.datasource.url=jdbc:mysql://localhost:3306/(DatabaseName)
            spring.datasource.username=username
            spring.datasource.password=password
            # Driver class (usually auto-detected)
            spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver


            # Hibernate properties (optional, but recommended)
            spring.jpa.hibernate.ddl-auto=update 
            spring.jpa.show-sql=true
            spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
    2. Add MySQL-java dependency for MySQL process

    3. Conversion of REST API: Using' @ResponseBody' annotation
        Return avoiding ModelAndView
        Return to JSON format like
            [
                {"id":1,"pname":"Banana","quantity":10,"price":50.0},
                {"id":2,"pname":"shop","quantity":30,"price":50.0}
            ]
    4. Postman Download:
        open browser -> https://www.postman.com/downloads/ -> Download postman or run on Online

        Open > GET > http://localhost:8081/viewAllProducts > Send

        See the response in:
            [
                {
                    "id": 1,
                    "pname": "Banana",
                    "quantity": 10,
                    "price": 50.0
                },
                {
                    "id": 2,
                    "pname": "shop",
                    "quantity": 30,
                    "price": 50.0
                }
            ]
        
    5. JSON to XML:
        web Browser :
            Open MVN Repository site > type (https://mvnrepository.com/artifact/com.fasterxml.jackson.dataformat/jackson-dataformat-xml) -> Select any version -> Copy dependency -> and Past bom.xml inside <dependencies>there paste</dependencies> 
        Postman Application:
            my Workspace -> Collection -> Headers -> Response Header -> Accept -> ../json (Change to ) ../xml

REST API Part 4:
    1. findById().orElse() Method:
        Incause The vakue doesnot contain database Defau;t Server return to 'null'.
        Spring Boot Avaid this "null" using  orElse Method return nothing.

    
    2. 	produces(Maintain The Send data type)
            @RequestMapping(path="/viewAllProducts",produces = {"application/xml"})
            @PostMapping(path="/viewAllProducts",produces = {"application/xml"})
    3. consume(Maintain the Get Data Type):

REST API Part 5:
    Annotations:
        @GetMapping
        @PostMapping
        @PutMapping
        @DeleteMapping   

    Basic:
        Post man POST data sent to body -> form data -> fill => Send Data Stor in database.
        Else body -> raw => json format -> Not Assign to data base


REST Data Set:
    It is used to CRUD Process without Controller.
    
    Project Creation:
        file -> new -> Spring started project -> <project Name> -> Add Dependencies ->
            Spring Data JPA
            MySQL Driver
            Rest Repository
        -> next -> Finish
    
    Create com.demo.model package and Add Some Model (refer to Source File)

    Laptop.java:

        @RepositoryRestResource(collectionResourceRel = "laptop", path = "laptops")
        public interface LaptopRepository extends CrudRepository<Laptop, Integer> {

        }
    com.example.demo.Application.java
        @SpringBootApplication
        @ComponentScan(basePackages = "com.exapmle.*")
        @EnableJpaRepositories("com.example.*")
        @EntityScan("com.example.*")

    Then Run the project and Use to check using Postman API





if Error H2 database Athar 500 error "check jstl Spelling"